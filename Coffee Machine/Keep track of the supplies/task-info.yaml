type: edu
custom_name: stage5
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    public class CoffeeMachine {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine_2.java
  visible: true
  text: |+
    package machine;

    import java.util.*;

    public class CoffeeMachine_2 {

        public enum CoffeeTypes {
            ESPRESSO(250, 0, 16, 4),
            LATTE(350, 75, 20, 7),
            CAPPUCCINO(200, 100, 12, 6);
            final int water;
            final int milk;
            final int beans;
            final int price;
            CoffeeTypes(int water, int milk, int beans, int price) {
                this.price = price;
                this.beans = beans;
                this.milk = milk;
                this.water = water;
            }
        }

        private int milk;
        private int water;
        private int beans;
        private int money;
        private int cups;

        public CoffeeMachine_2() {
            this.money = 550;
            this.water = 400;
            this.milk = 540;
            this.beans = 120;
            this.cups = 9;
        }

        @Override
        public String toString() {
            return String.format("The coffee machine has:\n" +
                    "%d ml of water\n" +
                    "%d ml of milk\n" +
                    "%d g of coffee beans\n" +
                    "%d disposable cups\n" +
                    "$%d of money\n", getWater(), getMilk(), getBeans(), getCups(), getMoney());
        }

        public void buy(CoffeeTypes coffeeType) {
            setBeans(getBeans() - coffeeType.beans);
            setCups(getCups() - 1);
            setMilk(getMilk() - coffeeType.milk);
            setWater(getWater() - coffeeType.water);
            setMoney(getMoney() + coffeeType.price);
        }

        public int getBeans() {
            return beans;
        }

        public int getCups() {
            return cups;
        }

        public int getMilk() {
            return milk;
        }

        public int getMoney() {
            return money;
        }

        public int getWater() {
            return water;
        }

        public void setBeans(int beans) {
            this.beans = beans;
        }

        public void setMilk(int milk) {
            this.milk = milk;
        }

        public void setWater(int water) {
            this.water = water;
        }

        public void setCups(int cups) {
            this.cups = cups;
        }

        public void setMoney(int money) {
            this.money = money;
        }

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            CoffeeMachine_2 coffeeMachine = new CoffeeMachine_2();

            System.out.println(coffeeMachine.toString());
            System.out.println("Write action (buy, fill, take): ");
            String action = scanner.next();
            switch (action) {
                case "buy":
                    System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino: ");
                    String input = scanner.next();

                    CoffeeTypes selectedCoffee;
                    switch (input) {
                        case "1":
                            selectedCoffee = CoffeeTypes.ESPRESSO;
                            break;
                        case "2":
                            selectedCoffee = CoffeeTypes.LATTE;
                            break;
                        case "3":
                            selectedCoffee = CoffeeTypes.CAPPUCCINO;
                            break;
                        default:
                            return;
                    }
                    coffeeMachine.buy(selectedCoffee);

                    break;
                case "fill":
                    System.out.println("Write how many ml of water you want to add: ");
                    coffeeMachine.setWater(coffeeMachine.getWater() + scanner.nextInt());
                    System.out.println("Write how many ml of milk you want to add: ");
                    coffeeMachine.setMilk(coffeeMachine.getMilk() + scanner.nextInt());
                    System.out.println("Write how many grams of coffee beans you want to add: ");
                    coffeeMachine.setBeans(coffeeMachine.getBeans() + scanner.nextInt());
                    System.out.println("Write how many disposable cups of coffee you want to add: ");
                    coffeeMachine.setCups(coffeeMachine.getCups() + scanner.nextInt());


                    break;
                case "take":
                    System.out.printf("I gave you $%d", coffeeMachine.getMoney());
                    coffeeMachine.setMoney(0);

                    break;
                default:
                    System.out.println("Invalid Action");
                    break;
            }
            System.out.println();
            System.out.println(coffeeMachine.toString());

        }
    }

  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5333#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 20 Apr 2022 19:15:02 UTC
record: 5
